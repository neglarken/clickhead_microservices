// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: auth-ms.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AuthMsService_SignIn_FullMethodName = "/protobuf.AuthMsService/SignIn"
	AuthMsService_SignUp_FullMethodName = "/protobuf.AuthMsService/SignUp"
	AuthMsService_WhoAmI_FullMethodName = "/protobuf.AuthMsService/WhoAmI"
)

// AuthMsServiceClient is the client API for AuthMsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthMsServiceClient interface {
	SignIn(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*TokenResponse, error)
	SignUp(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*SignUpResponse, error)
	WhoAmI(ctx context.Context, in *AccessTokenRequest, opts ...grpc.CallOption) (*UserResponse, error)
}

type authMsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthMsServiceClient(cc grpc.ClientConnInterface) AuthMsServiceClient {
	return &authMsServiceClient{cc}
}

func (c *authMsServiceClient) SignIn(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*TokenResponse, error) {
	out := new(TokenResponse)
	err := c.cc.Invoke(ctx, AuthMsService_SignIn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authMsServiceClient) SignUp(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*SignUpResponse, error) {
	out := new(SignUpResponse)
	err := c.cc.Invoke(ctx, AuthMsService_SignUp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authMsServiceClient) WhoAmI(ctx context.Context, in *AccessTokenRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, AuthMsService_WhoAmI_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthMsServiceServer is the server API for AuthMsService service.
// All implementations must embed UnimplementedAuthMsServiceServer
// for forward compatibility
type AuthMsServiceServer interface {
	SignIn(context.Context, *AuthRequest) (*TokenResponse, error)
	SignUp(context.Context, *AuthRequest) (*SignUpResponse, error)
	WhoAmI(context.Context, *AccessTokenRequest) (*UserResponse, error)
	mustEmbedUnimplementedAuthMsServiceServer()
}

// UnimplementedAuthMsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAuthMsServiceServer struct {
}

func (UnimplementedAuthMsServiceServer) SignIn(context.Context, *AuthRequest) (*TokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignIn not implemented")
}
func (UnimplementedAuthMsServiceServer) SignUp(context.Context, *AuthRequest) (*SignUpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignUp not implemented")
}
func (UnimplementedAuthMsServiceServer) WhoAmI(context.Context, *AccessTokenRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WhoAmI not implemented")
}
func (UnimplementedAuthMsServiceServer) mustEmbedUnimplementedAuthMsServiceServer() {}

// UnsafeAuthMsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthMsServiceServer will
// result in compilation errors.
type UnsafeAuthMsServiceServer interface {
	mustEmbedUnimplementedAuthMsServiceServer()
}

func RegisterAuthMsServiceServer(s grpc.ServiceRegistrar, srv AuthMsServiceServer) {
	s.RegisterService(&AuthMsService_ServiceDesc, srv)
}

func _AuthMsService_SignIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthMsServiceServer).SignIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthMsService_SignIn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthMsServiceServer).SignIn(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthMsService_SignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthMsServiceServer).SignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthMsService_SignUp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthMsServiceServer).SignUp(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthMsService_WhoAmI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthMsServiceServer).WhoAmI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthMsService_WhoAmI_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthMsServiceServer).WhoAmI(ctx, req.(*AccessTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthMsService_ServiceDesc is the grpc.ServiceDesc for AuthMsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthMsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.AuthMsService",
	HandlerType: (*AuthMsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignIn",
			Handler:    _AuthMsService_SignIn_Handler,
		},
		{
			MethodName: "SignUp",
			Handler:    _AuthMsService_SignUp_Handler,
		},
		{
			MethodName: "WhoAmI",
			Handler:    _AuthMsService_WhoAmI_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth-ms.proto",
}
